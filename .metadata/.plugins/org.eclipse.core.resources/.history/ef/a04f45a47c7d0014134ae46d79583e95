package com.fb.graph;

import java.util.ArrayList;
import java.util.List;

import com.yahoo.algos.Stack;

public class TopologicalSort<T> {

	/**
	 * Used for sorting the constraints between edges, history punch cards ordering.
	 * So if edge u--->v then u comes before v in toposort
	 * Can be done only on DAG. no cycles
	 *(a) Manufacturing processes
	 *(b) Course b can be taken after a so toposort is a->b
	 */
//	private static UnDirectedGraph<T> graph;
//	public TopologicalSort(UnDirectedGraph<T> graph){
//		this.graph = graph;
//	}
	
	private Stack<T> stackTopoNodes; 
	private List<T> visitedNodes = new ArrayList<T>();
	private UnDirectedGraph<T> graph;
	public TopologicalSort(UnDirectedGraph<T> graph){
		this.graph = graph;
		stackTopoNodes = new Stack<T>(graph.); 
	}
	
	public List<T> sort(){
		//Perform DFS on all nodes
		for(T node: graph){
			dfs(node);
		}
		return null;
	}
	
	private  void dfs(T node){
		visitedNodes.add(node);
		for(T leaf : graph.getAdjacentNodes(node)){
			if(!visitedNodes.contains(node)){
				dfs(leaf);
			}
		}
		stackTopoNodes.pus
	}
	
	public static void main(String[] args) {
		UnDirectedGraph<GraphNode> dg = new UnDirectedGraph<GraphNode>();
		GraphNode zero = new GraphNode("0");GraphNode one = new GraphNode("1");GraphNode two = new GraphNode("2");GraphNode three = new GraphNode("3");GraphNode four = new GraphNode("4");
		GraphNode five = new GraphNode("5");GraphNode six = new GraphNode("6");GraphNode seven = new GraphNode("7");GraphNode eight = new GraphNode("8");GraphNode nine = new GraphNode("9");
		dg.addNode(zero);dg.addNode(one);dg.addNode(two);dg.addNode(three);dg.addNode(four);dg.addNode(five);dg.addNode(six);dg.addNode(seven);
		dg.addEdge(zero, five);dg.addEdge(zero, one);dg.addEdge(zero, two);dg.addEdge(zero, six);
		dg.addEdge(six, seven);
		dg.addEdge(five,three);;dg.addEdge(four, five);
		/*
		 *             0
		 *          / / \ \
		 *        5  1  2  6
		 *      /  \      / 
		 *    3     4    7
		*/
		

	}

}
