package com.fb.graph;

import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Map.Entry;
/*
 * DO DFS to understand a connected component
 */
public class ConnectedSubGraphs<T>{
	
	private final DirectedGraph<T> graph;
	private final ArrayList<T> visitedNodes = new ArrayList<T>();
	private final HashMap<Integer,HashSet<T>> connectedComps = new HashMap<Integer,HashSet<T>>();

	public ConnectedSubGraphs(DirectedGraph<T> graph){
		this.graph = graph;
	}
	
	
	//Other WAy
	
	public void findConnectedComponents2(){
		//Iterate across all the Nodes
		
		int count =0;
		for(T node: graph){
			//Run DFS for a node and get back a connected components
			if(!isVisited(node)){
				connectedComps.put(count,new HashSet<T>());
				dfs(node, count++);
			}
		}
		//Connected comps are:
		for(Entry<Integer, HashSet<T>> entry : connectedComps.entrySet()){
			System.out.println(entry.getKey()+ " "+ entry.getValue());
		}
	}
	public void dfs(T node, int count){
		visitedNodes.add(node); connectedComps.get(count).add(node);
		for(T leafNode :graph.getAdjacentNodes(node)){
			if (!isVisited(leafNode)){
				dfs(leafNode, count);
			}
		}
	}	
	//Other way
	
	// one way
	public void findConnectedComponents(){
		List<HashSet<T>> subGraphLists = new ArrayList<HashSet<T>>();
		//Iterate across all the Nodes
		for(T node: graph){
			//Run DFS for a node and get back a connected components
			if(!isVisited(node)){
				HashSet<T> subGraph = new HashSet<T>();
				dfs(node, subGraph);
				subGraphLists.add(subGraph);
			}
		}
	}
	
	public void dfs(T node, HashSet<T> subGraph){
		visitedNodes.add(node); subGraph.add(node);
		for(T leafNode :graph.getAdjacentNodes(node)){
			if (!isVisited(leafNode)){
				dfs(leafNode, subGraph);
			}
		}
	}
	//one way
	
	
	public boolean isVisited(T node){
		return visitedNodes.contains(node);
	}
	
	
	public static void main(String[] args) {
	//      0                7-8
	//  5 	1  2 6
	//	    3       4         9-10-11-12
		
		DirectedGraph<GraphNode> dg = new DirectedGraph<GraphNode>();
		dg.addNode(new GraphNode("0"));dg.addNode(new GraphNode("1"));dg.addNode(new GraphNode("2"));dg.addNode(new GraphNode("3"));
		dg.addNode(new GraphNode("4"));dg.addNode(new GraphNode("5"));dg.addNode(new GraphNode("6"));dg.addNode(new GraphNode("7"));
		dg.addNode(new GraphNode("8"));dg.addNode(new GraphNode("9"));dg.addNode(new GraphNode("10"));dg.addNode(new GraphNode("11"));  dg.addNode(new GraphNode("12"));
		
	}
}
