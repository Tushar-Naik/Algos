package com.fb.graph;

import java.util.List;
import java.util.ArrayList;
import java.util.HashSet;
/*
 * DO DFS to understand a connected component
 */
public class ConnectedSubGraphs<T>{
	
	private final DirectedGraph<T> graph;
	private final ArrayList<T> visitedNodes = new ArrayList<T>();
	public ConnectedSubGraphs(DirectedGraph<T> graph){
		this.graph = graph;
	}
	
	public void findConnectedComponents(){
		List<HashSet<T>> subGraphLists = new ArrayList<HashSet<T>>();
		//Iterate across all the Nodes
		for(T node: graph){
			//Run DFS for a node and get back a connected components
			if(!isVisited(node)){
				HashSet<T> subGraph = new HashSet<T>();
				dfs(node, subGraph);
				subGraphLists.add(subGraph);
			}
		}
	}
	
	public void dfs(T node, HashSet<T> subGraph){
		visitedNodes.add(node); subGraph.add(node);
		for(T leafNode :graph.getAdjacentNodes(node)){
			if (!isVisited(leafNode)){
				dfs(leafNode, subGraph);
			}
		}
	}
	
	public boolean isVisited(T node){
		return visitedNodes.contains(node);
	}
	
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
